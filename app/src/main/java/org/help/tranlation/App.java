/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.help.tranlation;

import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.DirectoryStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Scanner;

public class App {

    private ConsoleCommand cc = new ConsoleCommand();
    private String currentFileName;
    private String systemPath = "C:/users/123/desktop/EnglishWords/%s.txt";
    
    private static boolean configReady = false;

    public static void main(String[] args) throws IOException {
        App app = new App();
        app.work();
        new Initializer();
    }

    public static void setConfigReady() {
        configReady = true;
    }


    public void work() {
        Scanner scan = new Scanner(System.in, Charset.forName("cp866"));
        String command;
        System.out.println("Hello, enter help, for looking on existing commands or start work");
        while(!(command = scan.nextLine()).equals("exit")) {
            String[] commands = command.split(" ");
            switch (commands[0]) {
                case "t" -> {cc.askGoogleTrans(concatinateWord(commands));}
                case "c" -> {createNewFile(commands[1]);}
                case "s" -> {setCurrentFileName(commands[1]);}
                case "a" -> {addWord(concatinateWord(commands));}
                case "b" -> {} //TODO (maxim) add funcionality for creating and selectiong binds
                case "sh" -> {showAllWordsFromCurrentFile();}
                case "shd" -> {showAllDictionaries();}
                case "help" -> {showOptions();}
            }
        }
        scan.close();
    }

    private void showAllWordsFromCurrentFile() {
        List<String> allWords = new ArrayList<>();
        if (currentFileName == null) {
            System.out.println("Current file not define, please set current file");
        } else {
            try {
               allWords = Files.readAllLines(Path.of(systemPath.formatted(currentFileName)));
            } catch (IOException e) {
                System.out.println("Can't read from that file, please set another");
                e.printStackTrace();
            }
        }
        for(String s : allWords) {
            System.out.println(s);
        }
    }


    private void showOptions() {
        System.out.println("t - translate word (t cat)");
        System.out.println("c - create new file in your directory (c Dictionary2)");
        System.out.println("s - set current name of file very you want to save words (s Dictionary1)");
        System.out.println("a - add word in your file (a cat - your translations)");
        System.out.println("sh - show all words from current file");
        System.out.println("shd - show all dictionaries from dir");
    }


    private void setCurrentFileName(String fileName) {
        currentFileName = fileName;
    }


    public void createNewFile(String fileName) {
        currentFileName = fileName;
        File f = new File(systemPath.formatted(currentFileName));
        try {
            f.createNewFile();
        } catch (IOException e) {
            System.out.println("Sorry, can't create new file");
        }
    }

    public void addWord(String word) {
        if (currentFileName == null) {
            System.out.println("You didn't set file for word saving");
        } else {
            Path path = Path.of("C:/users/123/desktop/EnglishWords/%s.txt".formatted(currentFileName));
            try {
                Files.writeString(path, (word + "\n"), StandardOpenOption.APPEND);
            } catch (IOException e) {
                System.out.println("Sorry, can't write word in file");
            }
        }
    }

    public String concatinateWord(String[] command) {
        StringBuilder sb = new StringBuilder();
        for (int i = 1; i < command.length; i++) {
           sb.append(command[i] + " ");
        }
        return sb.toString();
    }


    private void showAllDictionaries() {
        try (DirectoryStream<Path> stream = Files.newDirectoryStream(Path.of("C:/users/123/desktop/EnglishWords"))) {
            Iterator<Path> iterator = stream.iterator();
            while(iterator.hasNext()) {
                String file = iterator.next().getFileName().toString();
                System.out.println(file.replaceAll(".txt", ""));
            }
        } catch (IOException e) {
            System.out.println("Sorry, can't read fro this dir any files");
            e.printStackTrace();
        }
    }

}
